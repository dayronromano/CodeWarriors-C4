type Query {
    allUsers: [User]
    usersByType(user_type: String!): [User]
    verifyUser(email: String!, password: String!): [User]
}

type Mutation {
    createUser(input: UserInput): User
    login(email: String!, password: String!): Token
    refreshToken: Token
    updateUser(_id: ID!, input: UserInputUpdate): User
    deleteUser(_id: ID!): User
}

type User {
    _id: ID!
    full_name: String!
    cc: String!
    email: String!
    password: String!
    user_type: String!
    status: String!
}

input UserInput {
    full_name: String!
    cc: String!
    email: String!
    password: String!
    user_type: RoleUser!
    status: TaskStateEnum!
}

input UserInputUpdate {
    full_name: String
    cc: String
    email: String
    password: String
    user_type: RoleUser
    status: TaskStateEnum
}

type Token {
    token: String
    error: String
}

enum TaskStateEnum {
    PENDIENTE
    AUTORIZADO
    NO_AUTORIZADO
}

enum RoleUser {
    ADMINISTRADOR
    ESTUDIANTE
    LIDER
}